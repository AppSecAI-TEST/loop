@code{
  import loop.ast.*;
  templates = [
      Call : 'emitCall',
      Computation : 'emitComputation',
      IntLiteral : 'emitLiteral',
      Variable : 'emitVariable',
      BinaryOp : 'emitBinaryOp',
      StringLiteral : 'emitString',
      Assignment : 'emitAssignment',
      InlineMapDef : 'emitMap',
      InlineListDef : 'emitList',
      IndexIntoList : 'emitIndexInto',
      CallChain : 'emitCallChain',
  ];
}

@declare{'emitArgs'}@foreach{arg : args.children()}@{arg.name()}@end{', '}@end{}
@declare{'emitLiteral'}@{node.value}@end{}
@declare{'emitString'}@{node.value}@end{}
@declare{'emitVariable'}@{node.name}@end{}
@declare{'emitBinaryOp'}@code{target = node.children().get(0);}@{node.name()} @includeNamed{templates[target.getClass()]; node = target}@end{}
@declare{'emitMap'}@code{i=0; size=node.children().size()}[@foreach{child : node.children()}@includeNamed{templates[child.getClass()]; node = child}@code{i++}@if{i % 2 != 0}:@else{i < size}, @end{}@end{}]@end{}
@declare{'emitList'}[@foreach{child : node.children()}@includeNamed{templates[child.getClass()]; node = child}@end{', '}]@end{}

@declare{'emitIndexInto'}@code{target=node.from()}[@includeNamed{templates[target.getClass()]; node = target}]@end{}
@declare{'emitCallChain'}@foreach{child : node.children()}@includeNamed{templates[child.getClass()]; node = child}@end{'.'}@end{}

@declare{'emitCall'}
@{node.name()}(@if{!node.args().children().isEmpty()}@code{target = node.args().children().get(0);}@includeNamed{templates[target.getClass()]; node = target}@end{})
@end{}

@declare{'emitAssignment'}@code{lhs = node.lhs();rhs = node.rhs();}
@includeNamed{templates[lhs.getClass()]; node = lhs} = @includeNamed{templates[rhs.getClass()]; node = rhs}
@end{}

@declare{'emitComputation'}(@foreach{child : node.children()}@includeNamed{templates[child.getClass()]; node = child}@end{})@end{}

@foreach{func : functions()}
def @{func.name()}(@includeNamed{'emitArgs'; args=func.arguments()}) {@foreach{node : func.children()}
@includeNamed{templates[node.getClass()]}
@end{}}
@end{}
